---
env:
    name: &env_name Hopper-v3
    n_workers: 1
    n_envs: &nenvs 100

model:
    encoder: 
        units_list: []
        activation: relu
    actor:
        units_list: [64, 64]
        init_std: 1
        norm: null
        kernel_initializer: orthogonal
        activation: tanh
    value:
        units_list: [64, 64]
        norm: null
        kernel_initializer: glorot_uniform
        activation: tanh
    discriminator:
        units_list: [100, 100]
        activation: tanh

agent:
    algorithm: &algo gail
    precision: 32
    gamma: &gamma .995

    N_DISC_EPOCHS: 10
    disc_batch_size: 64

    MAX_STEPS: 1e10
    N_STEPS: &nsteps 100
    N_EPOCHS: &nepochs 50
    N_MBS: &nmbs 1
    LOG_PERIOD: 200
    EVAL_PERIOD: 2000
    max_kl: .1            # early stop when max_kl is violated. 0 or null suggests unbound

    normalize_obs: False
    normalize_reward: False

    # model path: root_dir/model_name/models
    # tensorboard path: root_dir/model_name/logs
    # the following names are just examples; they will be reset in our training process
    root_dir: *algo                         # root path for tensorboard logs
    model_name: *algo
    RECORD: False

    # arguments for optimizer
    opt_name: adam
    schedule_lr: False
    lr: 3e-4
    disc_lr: 3e-4
    clip_norm: .5
    opt_kwargs:
        epsilon: 1.e-5
    # arguments for loss
    clip_range: .2          # clip range for ppo
    entropy_coef: .001
    value_coef: 1

buffer:
    adv_type: gae     # nae or gae
    gamma: *gamma
    lam: .97
    n_envs: *nenvs
    N_STEPS: *nsteps
    N_EPOCHS: *nepochs
    N_MBS: *nmbs        # number of minibatches
    sample_keys: [obs, action, value, traj_ret, advantage, logpi]
    # mini-batch size = n_workers * n_envs * epslen / n_mbs

    # expert data path
    DATA_PATH: data/sac
