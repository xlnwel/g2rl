---
algorithm: &algo mappo

# model path: root_dir/model_name/name
# tensorboard path: root_dir/model_name/logs
# the following names are just examples; they will be reset in our training process
root_dir: *algo
model_name: *algo

env:
    name: &env_name smac_3s5z_vs_3s6z
    n_workers: 8
    n_envs: &nenvs 2
    use_state_agent: True
    use_mustalive: True
    add_center_xy: True
    timeout_done: True
    add_agent_id: False
    do_evaluation: False

agent:
    algorithm: *algo
    precision: 32

    MAX_STEPS: 1e8
    LOG_PERIOD: 200

strategy:
    train_loop:
        N_EPOCHS: &nepochs 5
        N_VALUE_EPOCHS: &nval_epochs 0
        N_MBS: &nmbs 1
        max_kl: 0            # early stop when max_kl is violated. 0 or null suggests unbound

        # (once, reuse, null)
        # "once" updates values at the end of each epoch
        # "reuse" updates values using value from train, which is staler than once
        # null doesn't update values.
        value_update: null

model:
    rnn_type: &rnn rnn_mlstm

    policy:
        encoder: 
            nn_id: mlp
            units_list: [64, 64, 64]
            kernel_initializer: orthogonal
            activation: relu
            norm: layer
            norm_after_activation: True
            norm_kwargs:
                epsilon: 1.e-5
        rnn:
            nn_id: *rnn
            units: 64
            kernel_initializer: orthogonal
            use_ln: True
        policy:
            nn_id: policy
            units_list: []
            kernel_initializer: orthogonal
            eval_act_temp: 1
            attention_action: False
            embed_dim: 32
            out_gain: .01

    value:
        encoder:
            nn_id: mlp
            units_list: [64, 64, 64]
            kernel_initializer: orthogonal
            activation: relu
            norm: layer
            norm_after_activation: True
            norm_kwargs:
                epsilon: 1.e-5
        rnn:
            nn_id: *rnn
            units: 64
            kernel_initializer: orthogonal
            use_ln: True
        value:
            nn_id: value
            units_list: []
            kernel_initializer: orthogonal

loss:
    policy:
        clip_range: .2
        entropy_coef: .01
        life_mask: True
    value:
        value_loss: clip
        clip_range: .2
        value_coef: 1
        life_mask: False

trainer:
    sample_size: &ss 10         # BPTT length
    store_state: True
    policy:
        optimizer:
            name: adam
            schedule_lr: False
            lr: 5e-4
            clip_norm: 10
            epsilon: 1.e-5
            weight_decay: 0
    value:
        optimizer:
            name: adam
            schedule_lr: False
            lr: 5e-4
            clip_norm: 10
            epsilon: 1.e-5

actor:
    rms:
        gamma: &gamma .99
        obs_names: [obs, global_state]
        normalize_obs: True
        normalize_reward: True
        normalize_reward_with_return: forward

buffer:
    adv_type: gae     # nae or gae
    gamma: *gamma
    lam: .95
    n_envs: *nenvs
    batch_size: 3092
    N_EPOCHS: *nepochs
    N_VALUE_EPOCHS: *nval_epochs
    N_MBS: *nmbs        # number of minibatches
    sample_size: *ss
    norm_adv: batch
    # mini-batch size = n_workers * n_envs * epslen / n_mbs
    sample_keys: [obs, global_state, action, value, traj_ret, advantage, logpi, mask, action_mask, life_mask, actor_h, actor_c, value_h, value_c]
